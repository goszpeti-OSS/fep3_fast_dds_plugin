// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file stream_types.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "stream_types.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define fep3_ddstypes_BusData_max_cdr_typesize 104ULL;
#define fep3_ddstypes_StreamType_max_cdr_typesize 59864ULL;
#define fep3_ddstypes_Property_max_cdr_typesize 596ULL;
#define fep3_ddstypes_BusData_max_key_cdr_typesize 0ULL;
#define fep3_ddstypes_StreamType_max_key_cdr_typesize 0ULL;
#define fep3_ddstypes_Property_max_key_cdr_typesize 0ULL;

fep3::ddstypes::Property::Property()
{
    // string m_name
    m_name ="";
    // string m_type
    m_type ="";
    // string m_value
    m_value ="";

}

fep3::ddstypes::Property::~Property()
{



}

fep3::ddstypes::Property::Property(
        const Property& x)
{
    m_name = x.m_name;
    m_type = x.m_type;
    m_value = x.m_value;
}

fep3::ddstypes::Property::Property(
        Property&& x) noexcept 
{
    m_name = std::move(x.m_name);
    m_type = std::move(x.m_type);
    m_value = std::move(x.m_value);
}

fep3::ddstypes::Property& fep3::ddstypes::Property::operator =(
        const Property& x)
{

    m_name = x.m_name;
    m_type = x.m_type;
    m_value = x.m_value;

    return *this;
}

fep3::ddstypes::Property& fep3::ddstypes::Property::operator =(
        Property&& x) noexcept
{

    m_name = std::move(x.m_name);
    m_type = std::move(x.m_type);
    m_value = std::move(x.m_value);

    return *this;
}

bool fep3::ddstypes::Property::operator ==(
        const Property& x) const
{

    return (m_name == x.m_name && m_type == x.m_type && m_value == x.m_value);
}

bool fep3::ddstypes::Property::operator !=(
        const Property& x) const
{
    return !(*this == x);
}

size_t fep3::ddstypes::Property::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return fep3_ddstypes_Property_max_cdr_typesize;
}

size_t fep3::ddstypes::Property::getCdrSerializedSize(
        const fep3::ddstypes::Property& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.name().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.type().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.value().size() + 1;


    return current_alignment - initial_alignment;
}

void fep3::ddstypes::Property::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_name.c_str();
    scdr << m_type.c_str();
    scdr << m_value.c_str();

}

void fep3::ddstypes::Property::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    {
        std::string aux;
        dcdr >> aux;
        m_name = aux.c_str();
    }
    {
        std::string aux;
        dcdr >> aux;
        m_type = aux.c_str();
    }
    dcdr >> m_value;
}

/*!
 * @brief This function copies the value in member name
 * @param _name New value to be copied in member name
 */
void fep3::ddstypes::Property::name(
        const eprosima::fastrtps::fixed_string<256>& _name)
{
    m_name = _name;
}

/*!
 * @brief This function moves the value in member name
 * @param _name New value to be moved in member name
 */
void fep3::ddstypes::Property::name(
        eprosima::fastrtps::fixed_string<256>&& _name)
{
    m_name = std::move(_name);
}

/*!
 * @brief This function returns a constant reference to member name
 * @return Constant reference to member name
 */
const eprosima::fastrtps::fixed_string<256>& fep3::ddstypes::Property::name() const
{
    return m_name;
}

/*!
 * @brief This function returns a reference to member name
 * @return Reference to member name
 */
eprosima::fastrtps::fixed_string<256>& fep3::ddstypes::Property::name()
{
    return m_name;
}
/*!
 * @brief This function copies the value in member type
 * @param _type New value to be copied in member type
 */
void fep3::ddstypes::Property::type(
        const eprosima::fastrtps::fixed_string<64>& _type)
{
    m_type = _type;
}

/*!
 * @brief This function moves the value in member type
 * @param _type New value to be moved in member type
 */
void fep3::ddstypes::Property::type(
        eprosima::fastrtps::fixed_string<64>&& _type)
{
    m_type = std::move(_type);
}

/*!
 * @brief This function returns a constant reference to member type
 * @return Constant reference to member type
 */
const eprosima::fastrtps::fixed_string<64>& fep3::ddstypes::Property::type() const
{
    return m_type;
}

/*!
 * @brief This function returns a reference to member type
 * @return Reference to member type
 */
eprosima::fastrtps::fixed_string<64>& fep3::ddstypes::Property::type()
{
    return m_type;
}
/*!
 * @brief This function copies the value in member value
 * @param _value New value to be copied in member value
 */
void fep3::ddstypes::Property::value(
        const std::string& _value)
{
    m_value = _value;
}

/*!
 * @brief This function moves the value in member value
 * @param _value New value to be moved in member value
 */
void fep3::ddstypes::Property::value(
        std::string&& _value)
{
    m_value = std::move(_value);
}

/*!
 * @brief This function returns a constant reference to member value
 * @return Constant reference to member value
 */
const std::string& fep3::ddstypes::Property::value() const
{
    return m_value;
}

/*!
 * @brief This function returns a reference to member value
 * @return Reference to member value
 */
std::string& fep3::ddstypes::Property::value()
{
    return m_value;
}


size_t fep3::ddstypes::Property::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return fep3_ddstypes_Property_max_key_cdr_typesize;
}

bool fep3::ddstypes::Property::isKeyDefined()
{
    return false;
}

void fep3::ddstypes::Property::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

fep3::ddstypes::StreamType::StreamType()
{
    // string m_metatype
    m_metatype ="";
    // sequence<fep3::ddstypes::Property> m_properties


}

fep3::ddstypes::StreamType::~StreamType()
{


}

fep3::ddstypes::StreamType::StreamType(
        const StreamType& x)
{
    m_metatype = x.m_metatype;
    m_properties = x.m_properties;
}

fep3::ddstypes::StreamType::StreamType(
        StreamType&& x) noexcept 
{
    m_metatype = std::move(x.m_metatype);
    m_properties = std::move(x.m_properties);
}

fep3::ddstypes::StreamType& fep3::ddstypes::StreamType::operator =(
        const StreamType& x)
{

    m_metatype = x.m_metatype;
    m_properties = x.m_properties;

    return *this;
}

fep3::ddstypes::StreamType& fep3::ddstypes::StreamType::operator =(
        StreamType&& x) noexcept
{

    m_metatype = std::move(x.m_metatype);
    m_properties = std::move(x.m_properties);

    return *this;
}

bool fep3::ddstypes::StreamType::operator ==(
        const StreamType& x) const
{

    return (m_metatype == x.m_metatype && m_properties == x.m_properties);
}

bool fep3::ddstypes::StreamType::operator !=(
        const StreamType& x) const
{
    return !(*this == x);
}

size_t fep3::ddstypes::StreamType::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return fep3_ddstypes_StreamType_max_cdr_typesize;
}

size_t fep3::ddstypes::StreamType::getCdrSerializedSize(
        const fep3::ddstypes::StreamType& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.metatype().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.properties().size(); ++a)
    {
        current_alignment += fep3::ddstypes::Property::getCdrSerializedSize(data.properties().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void fep3::ddstypes::StreamType::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_metatype.c_str();
    scdr << m_properties;

}

void fep3::ddstypes::StreamType::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_metatype;
    dcdr >> m_properties;
}

/*!
 * @brief This function copies the value in member metatype
 * @param _metatype New value to be copied in member metatype
 */
void fep3::ddstypes::StreamType::metatype(
        const std::string& _metatype)
{
    m_metatype = _metatype;
}

/*!
 * @brief This function moves the value in member metatype
 * @param _metatype New value to be moved in member metatype
 */
void fep3::ddstypes::StreamType::metatype(
        std::string&& _metatype)
{
    m_metatype = std::move(_metatype);
}

/*!
 * @brief This function returns a constant reference to member metatype
 * @return Constant reference to member metatype
 */
const std::string& fep3::ddstypes::StreamType::metatype() const
{
    return m_metatype;
}

/*!
 * @brief This function returns a reference to member metatype
 * @return Reference to member metatype
 */
std::string& fep3::ddstypes::StreamType::metatype()
{
    return m_metatype;
}
/*!
 * @brief This function copies the value in member properties
 * @param _properties New value to be copied in member properties
 */
void fep3::ddstypes::StreamType::properties(
        const std::vector<fep3::ddstypes::Property>& _properties)
{
    m_properties = _properties;
}

/*!
 * @brief This function moves the value in member properties
 * @param _properties New value to be moved in member properties
 */
void fep3::ddstypes::StreamType::properties(
        std::vector<fep3::ddstypes::Property>&& _properties)
{
    m_properties = std::move(_properties);
}

/*!
 * @brief This function returns a constant reference to member properties
 * @return Constant reference to member properties
 */
const std::vector<fep3::ddstypes::Property>& fep3::ddstypes::StreamType::properties() const
{
    return m_properties;
}

/*!
 * @brief This function returns a reference to member properties
 * @return Reference to member properties
 */
std::vector<fep3::ddstypes::Property>& fep3::ddstypes::StreamType::properties()
{
    return m_properties;
}


size_t fep3::ddstypes::StreamType::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return fep3_ddstypes_StreamType_max_key_cdr_typesize;
}

bool fep3::ddstypes::StreamType::isKeyDefined()
{
    return false;
}

void fep3::ddstypes::StreamType::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

fep3::ddstypes::BusData::BusData()
{
    // sequence<octet> m_data


}

fep3::ddstypes::BusData::~BusData()
{
}

fep3::ddstypes::BusData::BusData(
        const BusData& x)
{
    m_data = x.m_data;
}

fep3::ddstypes::BusData::BusData(
        BusData&& x) noexcept 
{
    m_data = std::move(x.m_data);
}

fep3::ddstypes::BusData& fep3::ddstypes::BusData::operator =(
        const BusData& x)
{

    m_data = x.m_data;

    return *this;
}

fep3::ddstypes::BusData& fep3::ddstypes::BusData::operator =(
        BusData&& x) noexcept
{

    m_data = std::move(x.m_data);

    return *this;
}

bool fep3::ddstypes::BusData::operator ==(
        const BusData& x) const
{

    return (m_data == x.m_data);
}

bool fep3::ddstypes::BusData::operator !=(
        const BusData& x) const
{
    return !(*this == x);
}

size_t fep3::ddstypes::BusData::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return fep3_ddstypes_BusData_max_cdr_typesize;
}

size_t fep3::ddstypes::BusData::getCdrSerializedSize(
        const fep3::ddstypes::BusData& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.data().size() > 0)
    {
        current_alignment += (data.data().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }



    return current_alignment - initial_alignment;
}

void fep3::ddstypes::BusData::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_data;
}

void fep3::ddstypes::BusData::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_data;}

/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void fep3::ddstypes::BusData::data(
        const std::vector<uint8_t>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void fep3::ddstypes::BusData::data(
        std::vector<uint8_t>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::vector<uint8_t>& fep3::ddstypes::BusData::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::vector<uint8_t>& fep3::ddstypes::BusData::data()
{
    return m_data;
}


size_t fep3::ddstypes::BusData::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return fep3_ddstypes_BusData_max_key_cdr_typesize;
}

bool fep3::ddstypes::BusData::isKeyDefined()
{
    return false;
}

void fep3::ddstypes::BusData::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


